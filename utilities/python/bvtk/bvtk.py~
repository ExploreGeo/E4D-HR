#!/usr/bin/python
import sys
import io
import os
import time
import datetime
import numpy as np

#Function definitions--------------------------------------------------------------
def check_args(strv):
    #this function makes sure there are enough
    #arguments on the command line
    passed = True
    if (len(sys.argv) < 4):
        print ("\n-Not enough arguments on the command line")
        passed = False
        
    if (len(sys.argv) >= 1):
        if (sys.argv[1] != '-f' and  sys.argv[1] !='-af'):
            print ("\n-The specified flag is ",sys.argv[1])
            passed = False

    if (len(sys.argv) >= 2):
        mfcheck = True
        if(not os.path.isfile(sys.argv[2]+".1.node")):
            mfcheck = False
        if(not os.path.isfile(sys.argv[2]+".1.ele")):
            mfcheck = False
        if(not os.path.isfile(sys.argv[2]+".trn")):
            mfcheck = False
        if(not mfcheck):
            print ("\n-Specified mesh file prefix is: ",sys.argv[2])
            print (" Cannot find one of the following mesh files ...")
            print (" ",sys.argv[2]+".1.node")
            print (" ",sys.argv[2]+".1.ele")
            print (" ",sys.argv[2]+".trn")
            passed = False

    if(len(sys.argv) >= 3): 
        if(not os.path.isfile(sys.argv[3])):
            print ("\n-Cannot find the specified paramter file: ",sys.argv[3])
            passed = False
            
    if(len(sys.argv) >= 4 and sys.argv[1]=='-af' and passed):
        if(not os.path.isfile(sys.argv[4])):
            print ("\n-Append options -f specified, but I")
            print (" cannot find the specified vtk file: ",sys.argv[4])
            passed = False
    
    if(len(sys.argv) == 5):
        print ("\n-No time stamp specified, assuming time 0")
        
    if (not passed):
        print ("\nCalling sequence: bvtk -flag mesh_pre param_file vtk_out tstamp")
        print ("where ...")
        print ("  flag = f or af (f for new vtk file, af for append to existing)")
        print ("  mesh_pre = mesh files prefix")
        print ("  param_file = mesh or node centered e4d file name")
        print ("  vtk_out = name of output file (must exist for flag = af)")
        print ("  tstamp = parameter file time stamp")
        print ("\n")
#end of check args---------------------------------------------------------

def load_nodes(mesh_pre):
    f1 = open(mesh_pre+'.1.node','r')
    str = f1.readline().split()
    nnods = int(str[0])
    f1.close
    trn = np.genfromtxt(mesh_pre+'.trn')
    nods = np.genfromtxt(mesh_pre+'.1.node',skip_header=1,skip_footer=1,usecols=(1,2,3,5))
    #nod_flags = np.genfromtxt(mesh_pre+'.1.node',skip_header=1,skip_footer=1,usecols=(5))
    nods[:,0]=nods[:,0]+trn[0]
    nods[:,1]=nods[:,1]+trn[1]
    nods[:,2]=nods[:,2]+trn[2] 
    return nnods,nods
#end of load_nodes---------------------------------------------------------

def load_elements(mesh_pre):
    f1 = open(mesh_pre+'.1.ele','r')
    str = f1.readline().split()
    nele = int(str[0])
    f1.close()
    ele=np.genfromtxt(mesh_pre+'.1.ele',skip_header=1,skip_footer=0,usecols=(1,2,3,4,5))
    return nele,ele
#end of load_elements--------------------------------------------------------- 

def load_parameters(fname):
    f1 = open(fname,'r')
    str = f1.readline().split()
    nparm = int(str[0])
    ncol = int(str[1])
    f1.close()

    ucols = (0)
    if (ncol==2):
        ucols=(0,1)

    parm=np.genfromtxt(fname,skip_header=1,usecols=ucols)
    return nparm,parm
#end of load_parameters--------------------------------------------------------- 
 
def build_new_vtk(nnods,nele,nparm,nods,ele,parm,fnout):
    f1 = open(fnout,'w')
    f1.write('# vtk DataFile Version 2.0\n')
    f1.write('This is an E4D vis file constructed using bvtk.py\n')
    f1.write('ASCII\n')
    f1.write('DATASET UNSTRUCTURED_GRID\n')
    f1.write('POINTS %-10.0f float\n' % nnods)
    for i in range(nnods):
        f1.write('%f %f %f\n' % (nods[i,0],nods[i,1],nods[i,2]))
    f1.write('\n')

    f1.write('CELLS %-10.0f %-10.0f\n' % (nele,5*nele))
    for i in range(nele):
        f1.write('4 %-10.0f %-10.0f %-10.0f %-10.0f\n' % (ele[i,0]-1,ele[i,1]-1,ele[i,2]-1,ele[i,3]-1))
        #f1.write('4 '+str(int(ele[i,0]))+' ')
        #f1.write(str(int(ele[i,1]))+' ')
        #f1.write(str(int(ele[i,2]))+' ')
        #f1.write(str(int(ele[i,3]))+' ')
        #f1.write('\n')
  
    f1.write('\nCELL_TYPES %-10.0f\n' % nele)
    cnt = 0
    for i in range(nele):
        f1.write('10 ')
        cnt=cnt+1
        if(cnt==10):
            cnt=0
            f1.write('\n')
        

    f1.close()    

#Here's where the work starts
#make sure there are enough arguments on the command line
check_args(sys.argv)

#load the mesh files if warranted
if(sys.argv[1] == '-f'):
    nnods,nods = load_nodes(sys.argv[2])
    nele,ele = load_elements(sys.argv[2])
    print (nnods,nele)

#load the parameter file
nparm,parm = load_parameters(sys.argv[3])
print (parm.shape)

#build a new vtk file
if(sys.argv[1]=='-f'):
    build_new_vtk(nnods,nele,nparm,nods,ele,parm,sys.argv[4])

#
#test to see if the command line arguements were specified correctly
#for i in range(len(sys.argv)):
#    print sys.argv[i]


